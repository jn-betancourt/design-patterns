interface Subject {
  void registerObserver(Observer observer);
  void removeObserver(Observer observer);
  void notifyObservers();
}

class ConcreteSubject implements Subject {
  private List<Observer> observers = new ArrayList<>();

  private String state;

  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
    notifyObservers();
  }

  @Override
  public void registerObserver(Observer observer) {
    observers.add(observer);
  }

  @Override
  public void removeObserver(Observer observer) {
    observers.remove(observer);
  }

  @Override
  public void notifyObservers() {
    for (Observer observer : observers) {
      observer.update(this);
    }
  }
}

interface Observer {
  void update(Subject subject);
}

class ConcreteObserverA implements Observer {
  private Subject subject;

  public ConcreteObserverA(Subject subject) {
    this.subject = subject;
    subject.registerObserver(this);
  }

  @Override
  public void update(Subject subject) {
    System.out.println("ObserverA: El estado del sujeto ha cambiado a: " + subject.getState());
  }
}

class ConcreteObserverB implements Observer {
  private Subject subject;

  public ConcreteObserverB(Subject subject) {
    this.subject = subject;
    subject.registerObserver(this);
  }

  @Override
  public void update(Subject subject) {
    System.out.println("ObserverB: El estado del sujeto ha cambiado a: " + subject.getState());
  }
}

public class Main {
  public static void main(String[] args) {
    ConcreteSubject subject = new ConcreteSubject();

    ConcreteObserverA observerA = new ConcreteObserverA(subject);
    ConcreteObserverB observerB = new ConcreteObserverB(subject);

    subject.setState("Estado inicial");

    subject.setState("Estado nuevo"); // Imprime:
    // ObserverA: El estado del sujeto ha cambiado a: Estado nuevo
    // ObserverB: El estado del sujeto ha cambiado a: Estado nuevo
  }
}
